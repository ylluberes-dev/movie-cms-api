/**
 * @author Yasser Lluberes
 * @version 1.0
 */
package com.ylluberes.moviestore.domain;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;
import org.springframework.data.jpa.repository.JpaRepository;
import javax.persistence.*;
import java.util.*;

/**
 * Movie model-definition.
 */
@NoArgsConstructor
@Getter
@Setter
@Entity
@EqualsAndHashCode
public class Movie {

    public Movie (String title, String description, int stock, double salePrice, double rentalPrice) {
        this.title = title;
        this.description = description;
        this.stock = stock;
        this.salePrice = salePrice;
        this.rentalPrice = rentalPrice;
        available = true;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int movieId;

    private String title;
    private String description;
    private Integer stock;
    private Double rentalPrice;
    private Double salePrice;
    private Boolean available;

    /**
     * rentals: List of all rents generated by this movie
     */
    @OneToMany(mappedBy = "movie")
    @OnDelete(action = OnDeleteAction.CASCADE)
    @JsonIgnore
    private List<Rental> rentals = new ArrayList<>();

    /**
     * sales: List of all sales generated by this movie
     */
    @OneToMany(mappedBy = "movie")
    @OnDelete(action = OnDeleteAction.CASCADE)
    @JsonIgnore
    private List<Sale> sales = new ArrayList<>();

    /**
     * likes: List of distinct likes that this movie receive
     */
    @OneToMany(mappedBy = "movie")
    @OnDelete(action = OnDeleteAction.CASCADE)
    @JsonIgnore
    private Set<Likes> likes = new HashSet<>();

    /**
     * TODO: Check if you have to update the availability when stock is 0
     *
     * @param movieRepository repository that should update this entity stock value.
     * Decrease the stock by one when this movie is sold or bought
     */
    public void updateStock(final JpaRepository movieRepository) {
        if (stock > 0) {
            setStock(stock - 1);
            //setAvailable(stock == 0 ? false : true);
            movieRepository.save(this);
        }
    }

    /**
     * @return the total revenue generated by all all purchases and all sales
     */
    @JsonIgnore
    public double getRevenue () {
        return (salePrice * sales.size()) + (rentalPrice * rentals.size());
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Movie movie = (Movie) o;
        return
                movieId == movie.movieId
                        && stock == movie.stock
                        && Double.compare(movie.rentalPrice, rentalPrice) == 0
                        && Double.compare(movie.salePrice, salePrice) == 0
                        && available == movie.available && Objects.equals(title, movie.title)
                        && Objects.equals(description, movie.description);
    }

    @Override
    public int hashCode() {
        return Objects.hash(movieId, title, description, stock, rentalPrice, salePrice, available);
    }
}
