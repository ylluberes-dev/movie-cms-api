/**
 * @author Yasser Lluberes
 * @version 1.0
 */
package com.ylluberes.moviestore.domain;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;
import org.springframework.data.jpa.repository.JpaRepository;

import javax.persistence.*;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Movie model-definition.
 */
@NoArgsConstructor
@Getter
@Setter
@Entity
public class Movie {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int movieId;
    private String title;
    private String description;
    private int stock;
    private double rentalPrice;
    private double salePrice;
    private boolean available = true;
    private double totalRevenue;

    @OneToMany(mappedBy = "movie")
    @OnDelete(action = OnDeleteAction.CASCADE)
    private Set<Rental> rentals = new HashSet<>();

    @OneToMany(mappedBy = "movie")
    @OnDelete(action = OnDeleteAction.CASCADE)
    private Set<Sale> sales = new HashSet<>();

    @OneToMany(mappedBy = "movie")
    @OnDelete(action = OnDeleteAction.CASCADE)
    private Set<Likes> givenLikes = new HashSet<>();

    @ElementCollection
    private Set<String> customers;

    private int likes;

    public void updateStock(final JpaRepository movieRepository) {
        if (stock > 0) {
            setStock(stock - 1);
            //setAvailable(stock == 0 ? false : true);
            movieRepository.save(this);
        }
    }

    /**
     * @return the total revenue generated by all all purchases and all sales
     */
    public double getRevenue() {
        this.totalRevenue = (salePrice * sales.size()) + (rentalPrice * rentals.size());
        return totalRevenue;
    }

    public void updateLikes() {
        this.customers = givenLikes
                .stream()
                .map(customer -> customer.getEmail())
                .collect(Collectors.toSet());
        this.likes = givenLikes.size();
    }

}

